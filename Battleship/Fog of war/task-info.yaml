type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: test/battleship/BattleFieldModelTest.java
  visible: true
  text: |
    package battleship;

    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.Nested;
    import org.junit.jupiter.api.Test;

    import static org.junit.jupiter.api.Assertions.*;

    class BattleFieldModelTest {

        BattleFieldModel battleFieldModel;

        @BeforeEach
        void setUp() {
            battleFieldModel = new BattleFieldModel();
        }


        @Test
        void airCraftCarrierNotHorizontalOrVertical_throwsWrongInput() {
            var thrown = assertThrows(WrongLocation.class,
                    () -> battleFieldModel.setVessel(
                            new CoordinatesPair(
                                    new Coordinates(0, 0),
                                    new Coordinates(4, 4)),
                            BattleFieldModel.VesselType.AIRCRAFT_CARRIER));


            assertTrue(thrown.getMessage().contains("either horizontal or vertical"));
        }

        @Test
        void verticalDestroyersRightNextToEachOther_throwsTooClose() {
            // Avoid this situation: ships too close!
            //   1 2 3 4 5 6 7 8 9 10
            // A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // B ~ O O ~ ~ ~ ~ ~ ~ ~
            // C ~ O O ~ ~ ~ ~ ~ ~ ~
            // D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~


            battleFieldModel.setVessel(new CoordinatesPair(
                            new Coordinates(1, 1),
                            new Coordinates(2, 1)),
                    BattleFieldModel.VesselType.DESTROYER);

            assertThrows(TooClose.class,
                    () -> battleFieldModel.setVessel(new CoordinatesPair(
                                    new Coordinates(1, 2),
                                    new Coordinates(2, 2)),
                            BattleFieldModel.VesselType.DESTROYER));
        }

        @Test
        void verticalDestroyersRightAfterEachOther_throwsTooClose() {
            // Avoid this situation: ships too close!
            //   1 2 3 4 5 6 7 8 9 10
            // A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // B ~ O ~ ~ ~ ~ ~ ~ ~ ~
            // C ~ O ~ ~ ~ ~ ~ ~ ~ ~
            // D ~ O O ~ ~ ~ ~ ~ ~ ~
            // E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~


            battleFieldModel.setVessel(new CoordinatesPair(
                            new Coordinates(3, 1),
                            new Coordinates(3, 2)),
                    BattleFieldModel.VesselType.DESTROYER);

            assertThrows(TooClose.class,
                    () -> battleFieldModel.setVessel(new CoordinatesPair(
                                    new Coordinates(1, 1),
                                    new Coordinates(2, 1)),
                            BattleFieldModel.VesselType.DESTROYER));
        }

        @Test
        void verticalCruisersRightNextToEachOther_throwsTooClose() {
            // Avoid this situation: ships too close!
            //   1 2 3 4 5 6 7 8 9 10
            // A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // B ~ ~ ~ ~ ~ ~ ~ O ~ ~
            // C ~ ~ ~ ~ ~ ~ ~ O ~ ~
            // D ~ ~ ~ ~ ~ ~ ~ O O ~
            // E ~ ~ ~ ~ ~ ~ ~ ~ O ~
            // F ~ ~ ~ ~ ~ ~ ~ ~ O ~
            // G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~


            battleFieldModel.setVessel(new CoordinatesPair(
                            new Coordinates(1, 8),
                            new Coordinates(3, 8)),
                    BattleFieldModel.VesselType.CRUISER);

            assertThrows(TooClose.class,
                    () -> battleFieldModel.setVessel(new CoordinatesPair(
                                    new Coordinates(3, 9),
                                    new Coordinates(5, 9)),
                            BattleFieldModel.VesselType.CRUISER));
        }

        @Test
        void horizontalCruisersRightOfOtherCruiser_throwsTooClose() {
            // Avoid this situation: ships too close!
            //   1 2 3 4 5 6 7 8 9 10
            // A ~ ~ ~ ~ ~ ~ O O O O
            // B ~ ~ ~ ~ ~ ~ O ~ ~ ~
            // C ~ ~ ~ ~ ~ ~ O ~ ~ ~
            // D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
            // J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~


            battleFieldModel.setVessel(new CoordinatesPair(
                            new Coordinates(0, 6),
                            new Coordinates(2, 6)),
                    BattleFieldModel.VesselType.CRUISER);

            assertThrows(TooClose.class,
                    () -> battleFieldModel.setVessel(new CoordinatesPair(
                                    new Coordinates(0, 7),
                                    new Coordinates(0, 9)),
                            BattleFieldModel.VesselType.CRUISER));
        }


        @Nested
        class VerticalAircraftCarrier {

            @Test
            void setAircraftCarrierVerticalTooLong_throwsWrongInput() {
                var thrown = assertThrows(WrongLength.class,
                        () -> battleFieldModel.setAircraftCarrier(
                                new Coordinates(0, 0),
                                new Coordinates(5, 0)));

                assertTrue(thrown.getMessage().contains("wrong length"));
            }

            @Test
            void setAircraftCarrierVerticalTooShort_throwsWrongInput() {
                var thrown = assertThrows(WrongLength.class,
                        () -> battleFieldModel.setAircraftCarrier(
                                new Coordinates(0, 0),
                                new Coordinates(3, 0)));

                assertTrue(thrown.getMessage().contains("wrong length"));

            }

            @Test
            void set_aircraft_carrier_vertical_starting_at_00() {
                var start = new Coordinates(0, 0);
                var end = new Coordinates(4, 0);

                battleFieldModel.setAircraftCarrier(start, end);

                assertFalse(battleFieldModel.getField(start).isEmpty());
                assertFalse(battleFieldModel.getField(end).isEmpty());
            }

            @Test
            void set_aircraft_carrier_vertical_starting_at_00_inverted_input() {
                var start = new Coordinates(0, 0);
                var end = new Coordinates(4, 0);

                battleFieldModel.setAircraftCarrier(end, start);

                assertFalse(battleFieldModel.getField(start).isEmpty());
                assertFalse(battleFieldModel.getField(end).isEmpty());
            }

            @Test
            void set_aircraft_carrier_vertical_starting_at_09() {
                var start = new Coordinates(0, 9);
                var end = new Coordinates(4, 9);

                battleFieldModel.setAircraftCarrier(start, end);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }

            @Test
            void set_aircraft_carrier_vertical_ending_at_99() {
                var start = new Coordinates(5, 9);
                var end = new Coordinates(9, 9);

                battleFieldModel.setAircraftCarrier(start, end);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }

        }


        @Nested
        class HorizontalAircraftCarrier {

            @Test
            void setAircraftCarrierHorizontalTooLong_throwsWrongInput() {
                var thrown = assertThrows(WrongLength.class,
                        () -> battleFieldModel.setAircraftCarrier(
                                new Coordinates(0, 0),
                                new Coordinates(0, 5)));

                assertTrue(thrown.getMessage().contains("wrong length"));

            }

            @Test
            void set_aircraft_carrier_horizontal_too_short_throws_WrongInput() {
                var thrown = assertThrows(WrongLength.class,
                        () -> battleFieldModel.setAircraftCarrier(
                                new Coordinates(0, 0),
                                new Coordinates(0, 3)));

                assertTrue(thrown.getMessage().contains("wrong length"));

            }


            @Test
            void set_aircraft_carrier_horizontal_starting_at_00() {
                var start = new Coordinates(0, 0);
                var end = new Coordinates(0, 4);

                battleFieldModel.setAircraftCarrier(start, end);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }

            @Test
            void set_aircraft_carrier_horizontal_starting_at_00_inverted_input() {
                var start = new Coordinates(0, 0);
                var end = new Coordinates(0, 4);

                battleFieldModel.setAircraftCarrier(end, start);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }

            @Test
            void set_aircraft_carrier_horizontal_starting_at_90() {
                var start = new Coordinates(9, 0);
                var end = new Coordinates(9, 4);

                battleFieldModel.setAircraftCarrier(start, end);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }

            @Test
            void set_aircraft_carrier_horizontal_ending_at_99() {
                var start = new Coordinates(9, 5);
                var end = new Coordinates(9, 9);

                battleFieldModel.setAircraftCarrier(start, end);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }
        }

        @Nested
        class BattleShip {
            @Test
            void vertical_battleship_too_short() {
                var start = new Coordinates(0, 0);
                var end = new Coordinates(2, 0);
                var thrown = assertThrows(WrongLength.class,
                        () -> battleFieldModel.setBattleship(start, end));

                assertTrue(thrown.getMessage().contains("wrong length"));
            }

            @Test
            void horizontal_battleship_too_long() {
                var start = new Coordinates(0, 0);
                var end = new Coordinates(0, 4);
                var thrown = assertThrows(WrongLength.class,
                        () -> battleFieldModel.setBattleship(start, end));

                assertTrue(thrown.getMessage().contains("wrong length"));
            }

            @Test
            void battleship_switched_start_end_positions_still_ok() {
                var end = new Coordinates(0, 0);
                var start = new Coordinates(0, 3);

                battleFieldModel.setBattleship(start, end);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }


        }


        @Nested
        class VerticalBattleship {
            @Test
            void battleship() {
                var start = new Coordinates(6, 9);
                var end = new Coordinates(9, 9);
                battleFieldModel.setBattleship(start, end);

                assertEquals(Field.Status.SHIP, battleFieldModel.getField(start).getStatus());
                assertEquals(Field.Status.SHIP, battleFieldModel.getField(end).getStatus());
            }
        }

        @Nested
        class FieldTest {

            @Nested
            class Get {

                @Test
                void getField00_checkCoordinates() {
                    var field = battleFieldModel.getField(0, 0);
                    assertEquals(0, field.getHorizontalIndex());
                    assertEquals(0, field.getVerticalIndex());
                }

                @Test
                void getField01_checkCoordinates() {
                    var field = battleFieldModel.getField(1, 0);
                    assertEquals(0, field.getHorizontalIndex());
                    assertEquals(1, field.getVerticalIndex());
                }

                @Test
                void getField99_checkCoordinates() {
                    var field = battleFieldModel.getField(9, 9);

                    assertEquals(9, field.getHorizontalIndex());
                    assertEquals(9, field.getVerticalIndex());
                }

                @Test
                void getField00_isEmpty() {
                    var field = battleFieldModel.getField(0, 0);
                    assertTrue(field.isEmpty());
                }

                @Test
                void getField99_isEmpty() {
                    var field = battleFieldModel.getField(9, 9);
                    assertTrue(field.isEmpty());
                }
            }

            @Nested
            class Left {
                @Test
                void leftOf00_isNull() {
                    var current = battleFieldModel.getField(0, 0);
                    var left = battleFieldModel.leftOf(current);

                    assertNull(left);
                }

                @Test
                void leftOf09_is08() {
                    var current = battleFieldModel.getField(0, 9);
                    var left = battleFieldModel.leftOf(current);

                    assertEquals(8, left.getHorizontalIndex());
                    assertEquals(0, left.getVerticalIndex());
                }
            }

            @Nested
            class Above {

                @Test
                void of10_is00() {
                    var current = battleFieldModel.getField(1, 0);
                    var above = battleFieldModel.aboveOf(current);

                    assertEquals(0, above.getVerticalIndex());
                    assertEquals(0, above.getHorizontalIndex());
                }

                @Test
                void of00_isNull() {
                    var current = battleFieldModel.getField(0, 0);
                    var above = battleFieldModel.aboveOf(current);

                    assertNull(above);
                }

                @Test
                void of09_isNull() {
                    var current = battleFieldModel.getField(0, 9);
                    var above = battleFieldModel.aboveOf(current);

                    assertNull(above);
                }

                @Test
                void of99_is89() {
                    var field01 = battleFieldModel.getField(9, 9);
                    var above = battleFieldModel.aboveOf(field01);

                    assertEquals(8, above.getVerticalIndex());
                    assertEquals(9, above.getHorizontalIndex());
                }
            }

            @Nested
            class Below {

                @Test
                void of99_isNull() {
                    var current = battleFieldModel.getField(9, 9);
                    Field below = battleFieldModel.belowOf(current);

                    assertNull(below);
                }

                @Test
                void of00_is10() {
                    var current = battleFieldModel.getField(0, 0);

                    var below = battleFieldModel.belowOf(current);

                    assertEquals(1, below.getVerticalIndex());
                    assertEquals(0, below.getHorizontalIndex());
                }
            }

            @Nested
            class Right {
                @Test
                void of99_isNull() {
                    var current = battleFieldModel.getField(9, 9);

                    Field right = battleFieldModel.rightOf(current);

                    assertNull(right);
                }

                @Test
                void of00_is01() {
                    var current = battleFieldModel.getField(0, 0);

                    var right = battleFieldModel.rightOf(current);

                    assertEquals(1, right.getHorizontalIndex());
                    assertEquals(0, right.getVerticalIndex());
                }
            }


        }

        @Nested
        class Hit {

            @Test
            void hitWater_isMiss() {
                assertFalse(battleFieldModel.takeShot(0, 0));
            }

            @Test
            void hitWater_isMarkedMiss() {
                var shot = new Coordinates(1, 1);
                battleFieldModel.takeShot(shot);

                var target = battleFieldModel.getField(shot);

                assertEquals(Field.Status.MISS, target.getStatus());
            }

            @Test
            void hitShip_isMarkedHit() {
                battleFieldModel.setVessel(
                        new CoordinatesPair(
                                new Coordinates(0, 0),
                                new Coordinates(0, 1)),
                        BattleFieldModel.VesselType.DESTROYER);

                var shot = new Coordinates(0, 0);

                battleFieldModel.takeShot(shot);

                var target = battleFieldModel.getField(shot);

                assertEquals(Field.Status.HIT, target.getStatus());
            }
        }


    }
  learner_created: false
- name: test/battleship/BattleFieldTest.java
  visible: true
  text: |
    package battleship;

    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.Test;

    import static org.junit.jupiter.api.Assertions.assertEquals;

    class BattleFieldTest {

        BattleField battleField;

        @BeforeEach
        public void setup() {
            battleField = new BattleField();
        }


        @Test
        void printEmptyTest() {
            var fieldRepresentation = battleField.getRepresentationString();

            var emptyFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n";
            assertEquals(emptyFieldRepresentation, fieldRepresentation);
        }

        @Test
        void print_field_with_vertical_aircraft_carrier_starting_at_00() {
            battleField.battleFieldModel.setAircraftCarrier(
                    new Coordinates(0, 0),
                    new Coordinates(4, 0));
            var fieldRepresentation = battleField.getRepresentationString();

            var expectedFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n";
            assertEquals(expectedFieldRepresentation, fieldRepresentation);
        }

        @Test
        void print_field_with_horizontal_aircraft_carrier_ending_at_99() {
            battleField.battleFieldModel.setAircraftCarrier(
                    new Coordinates(9, 5),
                    new Coordinates(9, 9));
            var fieldRepresentation = battleField.getRepresentationString();

            var expectedFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "J ~ ~ ~ ~ ~ O O O O O\n";
            assertEquals(expectedFieldRepresentation, fieldRepresentation);
        }

        @Test
        void print_field_with_horizontal_battleship_ending_at_99() {
            battleField.battleFieldModel.setBattleship(
                    new Coordinates(9, 6),
                    new Coordinates(9, 9));
            var fieldRepresentation = battleField.getRepresentationString();

            var expectedFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "J ~ ~ ~ ~ ~ ~ O O O O\n";
            assertEquals(expectedFieldRepresentation, fieldRepresentation);
        }

        @Test
        void print_field_with_vertical_submarine_ending_at_99() {
            battleField.battleFieldModel.setSubmarine(
                    new Coordinates(7, 9),
                    new Coordinates(9, 9));
            var fieldRepresentation = battleField.getRepresentationString();

            var expectedFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ O\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ O\n" +
                    "J ~ ~ ~ ~ ~ ~ ~ ~ ~ O\n";
            assertEquals(expectedFieldRepresentation, fieldRepresentation);
        }

        @Test
        void print_field_with_two_vessels() {
            battleField.battleFieldModel.setBattleship(
                    new Coordinates(9, 6),
                    new Coordinates(9, 9));

            battleField.battleFieldModel.setAircraftCarrier(
                    new Coordinates(0, 0),
                    new Coordinates(4, 0));

            var fieldRepresentation = battleField.getRepresentationString();

            var expectedFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "J ~ ~ ~ ~ ~ ~ O O O O\n";
            assertEquals(expectedFieldRepresentation, fieldRepresentation);
        }

        @Test
        void missedShot_markedWithM() {
            var shot = new Coordinates(0, 0);

            battleField.battleFieldModel.takeShot(shot);

            var fieldRepresentation = battleField.getRepresentationString();

            var emptyFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A M ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n";
            assertEquals(emptyFieldRepresentation, fieldRepresentation);
        }

        @Test
        void hitShot_markedWithX() {

            battleField.battleFieldModel.setSubmarine(
                    new Coordinates(0, 0),
                    new Coordinates(2, 0));

            var shot = new Coordinates(0, 0);
            battleField.battleFieldModel.takeShot(shot);

            var fieldRepresentation = battleField.getRepresentationString();

            var emptyFieldRepresentation = "  1 2 3 4 5 6 7 8 9 10\n" +
                    "A X ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "B O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "C O ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "D ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "F ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "I ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n" +
                    "J ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n";
            assertEquals(emptyFieldRepresentation, fieldRepresentation);
        }


    }
  learner_created: false
- name: test/battleship/FieldTest.java
  visible: true
  text: |
    package battleship;

    import org.junit.jupiter.api.BeforeEach;
    import org.junit.jupiter.api.Nested;
    import org.junit.jupiter.api.Test;

    import static org.junit.jupiter.api.Assertions.assertTrue;

    class FieldTest {

        @Nested
        class NewSingleField {
            Field field;

            @BeforeEach
            void setup() {
                field = new Field(1, 1);
            }

            @Test
            void isEmpty() {
                assertTrue(field.isEmpty());
            }
        }

    }
  learner_created: false
- name: test/battleship/CoordinatesTest.java
  visible: true
  text: |
    package battleship;

    import org.junit.jupiter.api.Test;

    import static org.junit.jupiter.api.Assertions.*;

    class CoordinatesTest {

        @Test
        void of_A1() {
            var coordinates = Coordinates.of("A1");

            assertEquals(0, coordinates.getHorizontalIndex());
            assertEquals(0, coordinates.getVerticalIndex());
        }

        @Test
        void of_B2() {
            var coordinates = Coordinates.of("B2");

            assertEquals(1, coordinates.getHorizontalIndex());
            assertEquals(1, coordinates.getVerticalIndex());
        }

        @Test
        void of_I10() {
            var coordinates = Coordinates.of("I10");

            assertEquals(9, coordinates.getHorizontalIndex());
            assertEquals(8, coordinates.getVerticalIndex());
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/125/stages/665/implement#comment
status: Unchecked
record: -1
